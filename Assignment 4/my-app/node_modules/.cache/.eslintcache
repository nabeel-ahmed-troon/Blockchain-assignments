[{"D:\\React_app\\my-app\\src\\index.js":"1","D:\\React_app\\my-app\\src\\App.js":"2"},{"size":3630,"mtime":1638881962470,"results":"3","hashOfConfig":"4"},{"size":38703,"mtime":1641300293113,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1tau724",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"D:\\React_app\\my-app\\src\\index.js",[],["12","13"],"D:\\React_app\\my-app\\src\\App.js",["14","15","16","17","18","19"],"// import React from 'react';\r\n\r\n// function Card(props)\r\n// {\r\n//     return(\r\n//     <>\r\n//     <div className=\"cards\">\r\n//         <div className=\"card\">\r\n//             <img className=\"card_image\" src={props.imgSrc} alt=\"MyPic\"/>\r\n//             <div className=\"card_info\">\r\n//                 <span className=\"card_category\"></span>\r\n//                 <h3 className=\"class_title\"></h3>\r\n//                 <a href={props.link}>\r\n//                     <button>Watch Now</button>\r\n//                 </a>\r\n//             </div>\r\n//         </div>\r\n\r\n//     </div>\r\n//     </>\r\n//     );\r\n// }\r\n\r\n// export default Card;\r\n//=======================================\r\n// import React from \"react\";\r\n// const {ethers}=require('ethers');\r\n\r\n// let contract;\r\n// const App=()=>{\r\n//     const ethereum =window.ethereum;\r\n    \r\n    \r\n   \r\n//     let abi=[\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"balance\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"getBalance\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"_balance\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"setBalance\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         }\r\n//     ];\r\n//     let conAddress=\"0xd6dfe26Ef82b4343AFE0343367CF3c5d50aFdadb\";\r\n\r\n//   //contract=new ethereum.eth.Contract(abi,conAddress);\r\n    \r\n\r\n//     const login=async()=>{\r\n    \r\n//         if(ethereum){\r\n//             ethereum.request({ method: 'eth_requestAccounts' });\r\n//            // console.log(ethereum.request({ method: 'eth_getBalance' }));\r\n//            // console.log()\r\n//             }\r\n//         else{\r\n//             console.log(\"Install Metamask\");\r\n//         }\r\n//         contract = new ethers.Contract(conAddress,abi);\r\n//         const setData= await contract.setBalance(10);\r\n//         const getData= await contract.getBalance();\r\n//         console.log(getData.toString());\r\n    \r\n//     }\r\n\r\n       \r\n        \r\n\r\n\r\n//     return(\r\n//         <>\r\n//         <h1 className=\"mainHeading\">Ethereum Dapp</h1>\r\n//         <span>Login to Metamask to connect to Rinkeby<br></br></span>\r\n//         <button className=\"loginBtn\" onClick={login}>Login</button><br></br>\r\n//         <input type=\"text\"></input>\r\n//         <button className=\"transferBtn\">Transfer</button>\r\n//         <button className=\"transferBtn\">GetBalance</button>\r\n//         </>\r\n//     );\r\n// }\r\n// export default App;\r\n\r\n//==========================================================\r\n//==>IMPORTANT==>IMPORTANT==>IMPORTANT==>IMPORTANT==>IMPORTANT==>IMPORTANT==>\r\n// import React,{useState} from 'react'\r\n// import {ethers} from 'ethers'\r\n\r\n\r\n\r\n\r\n// const App=()=>{\r\n\r\n//     const [balance,balanceUpdate]=useState(null);\r\n//     const [LoginButtonTxt,setLoginButtonText]=useState('MetaMask Login');\r\n//     const [defaultAddress,setDefaultAddress]=useState(null);\r\n    \r\n\r\n//     const AppHandler=()=>{\r\n        \r\n//         if(window.ethereum&&window.ethereum.isMetaMask){\r\n//             console.log(\"Metamask running\");\r\n//             window.ethereum.request({method: 'eth_requestAccounts'})\r\n//             .then(result=>{\r\n//                     addressSet(result[0]);\r\n//                     setLoginButtonText('MetaMask Connected');\r\n                    \r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     const addressSet=(newAccount)=>\r\n//     {\r\n//         setDefaultAddress(newAccount);\r\n//     }\r\n\r\n//     const getBalance=(newAddress)=>{\r\n//         window.ethereum.request({method: 'eth_getBalance', params: [newAddress,'latest']})\r\n//         .then(balance=>{\r\n//                 balanceUpdate(ethers.utils.formatEther(balance));\r\n//                 console.log(\"running\");\r\n//         })\r\n//         console.log(\"getbalance button running\");\r\n//     }\r\n\r\n//     return(\r\n//         <>\r\n\r\n//         <h1>Ethereum Dapp <button onClick={AppHandler}>{LoginButtonTxt}</button></h1>\r\n\r\n//         <br>\r\n//         </br>\r\n//         <input type=\"text\" value=\"Enter to No of Token to transfer\"/>\r\n//         <br></br>\r\n//         <input type='text' value=\"Address of Receiver\"/><button>Transfer Token</button>\r\n//         <br></br>\r\n//         <h2>balance= {balance}</h2>\r\n//         <button onClick={getBalance(defaultAddress)}>GetBalance</button>\r\n\r\n\r\n//         </>\r\n//     );\r\n// }\r\n// export default App;\r\n\r\n\r\n//==>===========================================<=============\r\n\r\n//==>DIGITAL CLOCK CODE BELOW\r\n// import React, { useState } from 'react'\r\n\r\n// const App=()=>\r\n// {\r\n//     let time= new Date().toLocaleTimeString();\r\n//     const [currentTime,SetTime]=useState(time);\r\n\r\n//     const [cColor,SetColor]=useState('purple');\r\n\r\n//     const changeBg=()=>{\r\n//         let color='green';\r\n//         SetColor(color);\r\n//     }\r\n\r\n//     const backToNormal=()=>{\r\n//         let color='purple';\r\n//         SetColor(color);\r\n//     }\r\n\r\n//     const UpdateTime=()=>\r\n//     {\r\n\r\n//         time= new Date().toLocaleTimeString();\r\n//         SetTime  (time);\r\n//     };\r\n\r\n//     setInterval(UpdateTime,100);\r\n\r\n//     return(\r\n//         <>\r\n//         <div style={{backgroundColor:cColor}}>\r\n//             <h1 onMouseEnter={changeBg} onMouseLeave={backToNormal}>{currentTime}</h1>\r\n//             </div>\r\n//         </>\r\n//     );\r\n\r\n// }\r\n\r\n// export default App;\r\n\r\n//=====================\r\n\r\n// import React, { useState } from \"react\";\r\n// import {ethers} from 'ethers'\r\n// import Web3 from 'web3';\r\n\r\n\r\n\r\n//  const App=()=>{\r\n\r\n//     let conAddress=\"0x7e182c1433eABB36b7cF855cDF49ADa30EaEF7E0\";\r\n    \r\n//     let abi=[\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"get\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"_value\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"set\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"value\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         }\r\n//     ];\r\n    // const provider = new ethers.providers.Web3Provider(web3.currentProvider);\r\n    // let provider = new ethers.providers.JsonRpcProvider()\r\n    // let provider =ethers.getDefaultProvider();\r\n    // const contract= new ethers.Contract(conAddress,abi,provider);\r\n\r\n\r\n//     const web3 = new Web3(window.ethereum);\r\n//     const ethObj = new web3.eth.Contract(abi, conAddress);\r\n//     console.log(ethObj.methods,\"my Methods\");\r\n\r\n//     const [getNumber,setGetNumber]=useState('');\r\n//     const [number,setNumber]=useState(0);\r\n\r\n\r\n//     let connectMetamask=()=>{\r\n//         if(window.ethereum)\r\n//         {\r\n//             window.ethereum.request({method: 'eth_requestAccounts'});\r\n//             console.log(\"Metamask Connected\");\r\n//         }\r\n//     }\r\n\r\n//     const getBalance=async(e)=>{\r\n//         e.preventDefault();\r\n\r\n//         const result= await ethObj.methods.get().call();\r\n//         console.log(\"Test con obj : \",result);\r\n//         setGetNumber(result);\r\n//         console.log(result);\r\n//         console.log(\"contract\",ethObj);\r\n\r\n        \r\n//     }\r\n\r\n//     const setBalance=async(e)=>{\r\n//         e.preventDefault();\r\n//         const accounts=await window.ethereum.enable();\r\n//         const account=accounts[0];\r\n//         const gas= await ethObj.methods.set(number).estimateGas();\r\n        \r\n//         const result= await ethObj.methods.set(number).send({from: account,gas})\r\n//         //setNumber(result);\r\n//         console.log(result);\r\n//     }\r\n\r\n//     return(\r\n\r\n//         <>\r\n//         <h1>Smart Contract Integration</h1>\r\n//         <button onClick={connectMetamask}>Connect Metamask</button>\r\n\r\n//         <form onSubmit={setBalance}>\r\n\r\n//             <label>\r\n//                 Set Number : <input type=\"text\" value={number} onChange={e=>setNumber(e.target.value)}></input>\r\n\r\n//             </label>\r\n//             <input type=\"submit\" value=\"Set Number\"></input>\r\n//             </form>\r\n        \r\n\r\n//         <button onClick={getBalance} type=\"button\">Get Number</button>{getNumber}\r\n//         </>\r\n\r\n//     );\r\n\r\n\r\n\r\n//  }\r\n//  export default App;\r\n\r\n\r\n\r\n //==============erc20 smart contrat with front end;\r\n\r\n//  import React,{ useState} from 'react'\r\n//  import Web3 from 'web3'\r\n\r\n\r\n \r\n \r\n\r\n//  const App=()=>{\r\n\r\n//     const [userAccount,setUserAccount]=useState(\"\");\r\n//     const [amount,setAmount]=useState(0);\r\n//     const [metamaskStatus,setMetamaskStatus]=useState(\"Connect Metamask\");\r\n//     //below to check  total token\r\n//     const [balance,setBalance]=useState(0);\r\n\r\n//     const conAddress=\"0x83cC5ae4996909726f090E64DE5105013aF55050\";\r\n//     const abi=[\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"constructor\"\r\n//         },\r\n//         {\r\n//             \"anonymous\": false,\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"indexed\": true,\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"owner\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"indexed\": true,\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"spender\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"indexed\": false,\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"value\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"Approval\",\r\n//             \"type\": \"event\"\r\n//         },\r\n//         {\r\n//             \"anonymous\": false,\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"indexed\": true,\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"previousOwner\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"indexed\": true,\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"newOwner\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"OwnershipTransferred\",\r\n//             \"type\": \"event\"\r\n//         },\r\n//         {\r\n//             \"anonymous\": false,\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"indexed\": true,\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"from\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"indexed\": true,\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"to\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"indexed\": false,\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"value\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"Transfer\",\r\n//             \"type\": \"event\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"owner\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"spender\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"allowance\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"spender\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"amount\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"approve\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"bool\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"bool\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"account\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"balanceOf\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"decimals\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint8\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint8\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"spender\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"subtractedValue\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"decreaseAllowance\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"bool\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"bool\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"spender\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"addedValue\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"increaseAllowance\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"bool\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"bool\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"to\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"amount\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"mint\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"name\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"string\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"string\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"owner\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"renounceOwnership\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"symbol\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"string\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"string\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"totalSupply\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"recipient\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"amount\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"transfer\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"bool\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"bool\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"sender\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"recipient\",\r\n//                     \"type\": \"address\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"amount\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"transferFrom\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"bool\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"bool\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"newOwner\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"transferOwnership\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         }\r\n//     ];\r\n//     const web3= new Web3(window.ethereum);\r\n    \r\n\r\n//     const contract = new web3.eth.Contract(abi,conAddress);\r\n//     console.log(contract.methods);\r\n\r\n//     let connectMetamask=()=>{\r\n//                 if(window.ethereum)\r\n//                 {\r\n//                     window.ethereum.request({method: 'eth_requestAccounts'});\r\n//                     console.log(\"Metamask Connected\");\r\n//                     setMetamaskStatus(\"Connected\");\r\n                    \r\n//                 }\r\n                \r\n//             }\r\n\r\n//     const sendToken=async()=>{\r\n        \r\n        \r\n//         // const accounts= await window.ethereum.enable();\r\n//         const accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n//         const account= accounts[0];\r\n//         console.log(\"acoount address\",account);\r\n//         const gas= await contract.methods.transfer(userAccount,amount).estimateGas();\r\n//         const result= await contract.methods.transfer(userAccount,amount).sendTransaction({from:account,gas,amount});\r\n\r\n//         console.log(result);\r\n//         //await contract.methods.transfer(userAccount,amount);\r\n//         //await transaction.wait();\r\n\r\n//         console.log(`${amount} has been succesfully transfer to account : ${userAccount}`);\r\n        \r\n    \r\n\r\n// }\r\n//     const balanceOf=async()=>{\r\n//         const result= await contract.methods.balanceOf(balance).call();\r\n//         setBalance(result);\r\n\r\n//     }\r\n\r\n//     return(\r\n\r\n//         <>\r\n//         <h1>My Token</h1>\r\n//         <br></br>\r\n//         <button onClick={connectMetamask}>{metamaskStatus}</button>\r\n//         <br></br>\r\n//         <input type=\"text\" onChange={e=>setUserAccount(e.target.value)} placeholder=\"Enter receiver address\"/>\r\n//         <input type=\"text\" onChange={e=>setAmount(e.target.value)} placeholder=\"Enter Amount of Token\"/>\r\n//         <button onClick={sendToken}>Transfer Token</button>\r\n//         <br></br>\r\n//         <input type=\"text\" onChange={e=>setBalance(e.target.value)} placeholder=\"Enter Address\"/>\r\n//         <button onClick={balanceOf}>Balance</button>{balance}\r\n\r\n\r\n//         </>\r\n//     );\r\n\r\n//  }\r\n\r\n//  export default App;\r\n\r\n//===============================================\r\n//lottery system app below\r\n\r\n// import React from \"react\";\r\n// import Web3 from 'web3'\r\n\r\n\r\n// const App=()=>{\r\n\r\n//     return(\r\n//         <h1>nabeel</h1>\r\n//     );\r\n\r\n\r\n\r\n\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\nimport { parseEther } from 'ethers/lib/utils';\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nimport React, { useState } from 'react'\r\nimport Web3 from 'web3';\r\nimport { ButtonGroup } from '@mui/material';\r\n\r\nconst App=()=>{\r\n\r\n// let selectedAccount;\r\nconst [selectedAccount,setSelectedAccount]=useState(\"\");\r\nlet provider=window.ethereum;\r\nlet connectMetamask=()=>{\r\n\r\n  \r\n\r\n    if(provider!==\"undefined\")\r\n    {\r\n        provider.request({method : 'eth_requestAccounts',})\r\n                  .then((accounts)=>{\r\n\t\t\t\t\t  const account=accounts[0];\r\n                    setSelectedAccount(account);\r\n                    console.log(`slected Account is ${account}`);\r\n\t\t\t\t\tconsole.log('selected Account is : ',account);\r\n\r\n                  })\r\n                  .catch((err) => {\r\n                    console.log(err);\r\n                    return;\r\n                  });\r\n\r\n                  provider.on('accountsChanged', function(accounts){\r\n                      setSelectedAccount(accounts[0]);\r\n                      console.log(`selected account changed to ${accounts[0]}`);\r\n\r\n                  })\r\n\r\n                \r\n\r\n    }\r\n  }\r\n\r\n  const abi =[\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"buyTicket\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"claimFunds\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"claimReward\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"requestId\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"randomness\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"rawFulfillRandomness\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"selectWinner\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_vrfCoordinator\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_link\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"_keyhash\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"previousOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"OwnershipTransferred\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"renounceOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"requestId\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"RequestedRandomness\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"startLottery\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"startNewLottery\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"stopLottery\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"balanceOfAccount\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"buyerTicketCount\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"currentLotteryWinner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address payable\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"fee\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"lotteryId\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"randomness\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"remainingTickets\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"status\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"enum Lottery.lotteryStatus\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"ticketBuyer\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address payable\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"ticketOf\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];\r\n\r\n    const contractAddress='0xc6953534a854a0CadD5DbCEA9FbD4Da27980AcEE';\r\n\r\n    const [remainingTickets,setRemainingTickets]=useState(100);\r\n\tconst [amount,setAmount]=useState(0);\r\n\tconst [disable, setDisable] = useState(false);\r\n\tconst [walletStatus,setWalletStatus]=useState('Connect');\r\n\t//for balance check of account\r\n\tconst [balance,setBalance]=useState(100);\r\n\tconst [accountAddress,setAccountAddress]=useState('');\r\n\r\n\t//for check buyer ticket count\r\n\tconst [buyerTicketAddress,setBuyerTicketAddress]= useState('');\r\n\tconst [buyerTicketCount,setBuyerTicketCount]= useState(null);\r\n\t\r\n\t//Lottery winner\r\n\tconst [winner,setWinner]=useState(\"\");\r\n\r\n    const web3 = new Web3(provider);\r\n    \r\n    const contract= new web3.eth.Contract(abi,contractAddress);\r\n\tconsole.log(\"here is account address\",selectedAccount);\r\n\tconsole.log(contract.methods)\r\n\r\n\r\n    const buyTicket= async()=>{\r\n\r\n\t\t const accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n          const account= accounts[0];\r\n\t\t\t setSelectedAccount(account);\r\n\t\t\r\n\r\n        // const esGas= await contract.methods.buyTicket().estimateGas();\r\n\t\tvar fee  = \"10000000000000000\"\r\n        await contract.methods.buyTicket().send({from:accounts[0],value: web3.utils.fromWei(fee, 'wei')\r\n\t\t})\r\n\t\t\t\t\t\t\t\r\n\r\n\r\n\t\t\t\t\t.then((receipt)=>{\r\n\t\t\t\t\t\t\tconsole.log(\"buy tkts: \",selectedAccount, \" amt: \",amount,);\r\n\t\t\t\t\t\t});\r\n        //return buy;\r\n\t\t\r\n                    \r\n    }\r\n\r\n\t//To check the remianing lottery tickets\r\n\r\n    const remainTickets=async()=>{\r\n        const rem= await contract.methods.remainingTickets().call().then((rem)=>{\r\n            setRemainingTickets(rem);\r\n\t\t\tconsole.log(rem);\r\n\r\n        });\r\n    }\r\n\t//======================================================\r\n\r\n\t///below function is to check lottery collection balance\r\n\tconst balanceOf=async()=>{\r\n\t\t\r\n\t\tconst balance=\tawait contract.methods.balanceOfAccount().call().then((bal)=>{\r\n\t\t\t\tsetBalance(bal)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(\"balance of this account is :\",balance);\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn;\r\n\t\t  });\r\n\t}\r\n\r\n\tsetInterval(balanceOf,300);\r\n\tsetInterval(remainTickets,300);\r\n\t\r\n\t//=================================================================\r\n\t//lottery start stop funciton below\r\n\tconst startLottery=async()=>\r\n\t{\r\n\t\tconst accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.startLottery().send({from : accounts[0] }).then(()=>{\r\n\t\t\tconsole.log(\"Lottery has been started succesfully\");\r\n\t\t})\r\n\t}\r\n\r\n\tconst stopLottery=async()=>{\r\n\t\tconst accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.stopLottery().send({from : accounts[0] }).then(()=>{\r\n\t\t\tconsole.log(\"Lottery has been stopped succesfully\");\r\n\t\t})\r\n\t}\r\n    \r\n\tconst startNewLottery=async()=>{\r\n\t\tconst accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.startNewLottery().send({from : accounts[0] })\r\n\t\t.then(()=>{\r\n\t\t\tconsole.log(\"Lottery has been stopped succesfully\");\r\n\t\t});\r\n\t}\r\n\t//==================================\r\n\r\n\tconst selectWinner=async()=>{\r\n\t\tconst accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.selectWinner().send({from : accounts[0]})\r\n\t\t.then(()=>{\r\n\t\t\tconsole.log(\"succesfully winner selected\");\r\n\t\t\t<h3>Succesfuly selected winner</h3>\r\n\t\t\t//lotteryWinner();\r\n\t\t})\r\n\t\t\r\n\r\n\t}\r\n\r\n\tconst ownerTicketCount=async()=>{\r\n\t\t//const accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.buyerTicketCount(buyerTicketAddress).call().then((count)=>{\r\n\t\t\tconsole.log(buyerTicketCount,\": has \",count,\" :Tickets\");\r\n\t\t\tsetBuyerTicketCount(count);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tconst claimReward=async()=>{\r\n\t\tconst accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.claimReward().send({from : accounts[0]})\r\n\t\t.then(()=>{\r\n\t\t\tconsole.log(\"Reward claimed by the winner\");\r\n\t\t\t<h3>Succesfully Rewarded</h3>\r\n\t\t});\r\n\t}\r\n\r\n\tconst claimFund=async()=>{\r\n\t\tconst accounts = await  window.ethereum.request({method: 'eth_accounts'});\r\n\t\tawait contract.methods.claimFunds().send({from : accounts[0]})\r\n\t\t.then(()=>{\r\n\t\t\tconsole.log(\"Fund claimed by the manager\");\r\n\t\t\t<h3>Succesfully Funded</h3>\r\n\t\t});\r\n\t}\r\n\r\n\tconst lotteryWinner=async()=>{\r\n\t\tawait contract.methods.currentLotteryWinner().call()\r\n\t\t.then((addr)=>{\r\n\t\t\t\tconsole.log(\"Last Lottery Winner is : \",addr);\r\n\t\t\t\tsetWinner(addr);\r\n\t\t\t\t<h3>Last Lottery Winner is : {winner}</h3>\r\n\t\t});\r\n\t}\r\n\tsetInterval(lotteryWinner,500);\r\n\t\r\n\r\n    return(\r\n      <>\r\n\t  \r\n\t\t\t<div id='mid'>\r\n\t\t\t\t\r\n\t\t\t\t<div id='mid1'>\r\n\t\t\t\t\t<h1 id='midH1'>Lottery System Smart Contract</h1>\r\n\t\t\t\t\t<h3 id='connectButton'><button onClick={()=>{\r\n\t\t\t\t\t\tconnectMetamask();\r\n\t\t\t\t\t\tsetDisable(true);\r\n\t\t\t\t\t\tsetWalletStatus('Connected')\r\n\t\t\t\t\t\t}} className='button' disabled={disable}>{walletStatus}</button></h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div  id='mid2'>\r\n\t\t\t\t\t\t<div id='left'>\r\n\t\t\t\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Lottery</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Amount</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Lottery Address: </TableCell><TableCell>{contractAddress}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Lottery Ticket Price : </TableCell><TableCell>10000000Gwei</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Last Lottery Winner : </TableCell><TableCell>{winner}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Lottery Ticket Remaining : </TableCell><TableCell>{remainingTickets}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Lottery Balance : </TableCell><TableCell>{balance}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>Check the how much tickets you have <input placeholder='Enter the address' onChange={e=>setBuyerTicketAddress(e.target.value)}></input></TableCell><TableCell><Button size='small' variant='contained' onClick={()=>ownerTicketCount()}>Check</Button><br></br>Addr:<b>{buyerTicketAddress}</b> <br></br>Tickets :<b>{buyerTicketCount}</b></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</TableContainer>\r\n\r\n\t\t\t\t\t\t\t<TableContainer>\r\n\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<ButtonGroup size='small'>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained'  onClick={e=>startLottery()} className='button'>Start Lottery</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained' onClick={e=>stopLottery()} className='button'>Stop Lottery</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained' onClick={()=>buyTicket()} className='button'>Buy Ticket</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained'  onClick={e=>startLottery()} className='button'>Start Lottery</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t </ButtonGroup>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t<ButtonGroup size='small'>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained' onClick={e=>startNewLottery()} className='button'>Start New Lottery</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained' onClick={e=>selectWinner()} className='button'>Select Winner</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained' onClick={e=>claimReward()} className='button'>Claim Reward</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t <TableCell><Button variant='contained' onClick={e=>claimFund()} className='button'>Claim Funds</Button></TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t </ButtonGroup>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\r\n\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div id='right' className='btn-group'>\r\n\t\t\t\t\t\t\t<Stack spacing={3} direction='row' justifyContent=\"center\"\r\n  \t\t\t\t\t\t\t\talignItems=\"center\">\r\n\t\t\t\t\t\t\t\t<ButtonGroup size='small'>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t  \r\n     \r\n\t\t \r\n\t\t\r\n      </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n\r\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":797,"column":10,"nodeType":"26","messageId":"27","endLine":797,"endColumn":20},{"ruleId":"24","severity":1,"message":"28","line":1154,"column":16,"nodeType":"26","messageId":"27","endLine":1154,"endColumn":25},{"ruleId":"24","severity":1,"message":"29","line":1159,"column":9,"nodeType":"26","messageId":"27","endLine":1159,"endColumn":23},{"ruleId":"24","severity":1,"message":"30","line":1159,"column":24,"nodeType":"26","messageId":"27","endLine":1159,"endColumn":41},{"ruleId":"24","severity":1,"message":"31","line":1200,"column":15,"nodeType":"26","messageId":"27","endLine":1200,"endColumn":18},{"ruleId":"24","severity":1,"message":"32","line":1211,"column":9,"nodeType":"26","messageId":"27","endLine":1211,"endColumn":16},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'parseEther' is defined but never used.","Identifier","unusedVar","'setAmount' is assigned a value but never used.","'accountAddress' is assigned a value but never used.","'setAccountAddress' is assigned a value but never used.","'rem' is assigned a value but never used.","'balance' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]